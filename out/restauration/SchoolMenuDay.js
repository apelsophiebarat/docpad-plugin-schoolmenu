// Generated by CoffeeScript 1.6.3
(function() {
  var SchoolComments, SchoolMenuCourse, SchoolMenuDay, formatDayForJson, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  SchoolComments = require('./SchoolComments');

  SchoolMenuCourse = require('./SchoolMenuCourse');

  formatDayForJson = require('./SchoolUtils').formatDayForJson;

  SchoolMenuDay = (function() {
    function SchoolMenuDay(name, date, courses, comments) {
      this.name = name;
      this.date = date;
      this.courses = courses;
      this.comments = comments;
      this.coursesGroupedByType = __bind(this.coursesGroupedByType, this);
    }

    SchoolMenuDay.parseJson = function(name, date, data) {
      var comments, courseType, courses, loadedCourses, _i, _len, _ref;
      comments = SchoolComments.parseJson(data);
      courses = [];
      _ref = SchoolMenuCourse.allTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        courseType = _ref[_i];
        loadedCourses = SchoolMenuCourse.parseJson(courseType, data[courseType]);
        courses = courses.concat(loadedCourses);
      }
      return new SchoolMenuDay(name, date, courses, comments);
    };

    SchoolMenuDay.prototype.toString = function() {
      return "SchoolMenuDay(" + this.name + "," + this.date + "," + this.courses + "," + this.comments + ")";
    };

    SchoolMenuDay.prototype.formatJson = function() {
      var course;
      return {
        name: this.name,
        date: this.date.toISOString(),
        courses: (function() {
          var _i, _len, _ref, _results;
          _ref = this.courses;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            course = _ref[_i];
            _results.push(course.formatJson());
          }
          return _results;
        }).call(this),
        comments: this.comments.formatJson()
      };
    };

    SchoolMenuDay.prototype.addAll = function(otherDay) {
      var course, otherCourses, _i, _len, _ref;
      _ref = otherDay.courses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        course = _ref[_i];
        otherCourses = course.clone();
      }
      this.courses = this.courses.concat(otherCourses);
      this.comments.addAll(otherDay.comments);
      return this;
    };

    SchoolMenuDay.prototype.coursesGroupedByType = function() {
      var courses, grouped, output, sorted, type, _results;
      sorted = _.sortBy(this.courses, function(c) {
        return c.order();
      });
      grouped = _.groupBy(sorted, 'type');
      _results = [];
      for (type in grouped) {
        courses = grouped[type];
        _results.push(output = {
          type: type,
          courses: courses
        });
      }
      return _results;
    };

    return SchoolMenuDay;

  })();

  module.exports = SchoolMenuDay;

}).call(this);
