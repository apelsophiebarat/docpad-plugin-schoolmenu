// Generated by CoffeeScript 1.6.3
(function() {
  var SchoolMenuParser, TaskGroup, extendr, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  extendr = require('extendr');

  SchoolMenuParser = require('./restauration/SchoolMenuParser');

  _ = require('underscore');

  TaskGroup = require('taskgroup').TaskGroup;

  module.exports = function(BasePlugin) {
    var SchoolMenuPlugin, _ref;
    return SchoolMenuPlugin = (function(_super) {
      var updateMeta, updateMetaWithDefaults;

      __extends(SchoolMenuPlugin, _super);

      function SchoolMenuPlugin() {
        _ref = SchoolMenuPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SchoolMenuPlugin.prototype.name = 'schoolmenu';

      SchoolMenuPlugin.prototype.config = {
        menuRelativeOutDirPath: "menus",
        defaultMetas: {
          isMenu: true
        }
      };

      SchoolMenuPlugin.prototype.priority = 200;

      updateMeta = function(meta, changed) {
        return extendr.deepExtend({}, meta, changed);
      };

      updateMetaWithDefaults = function(meta, config) {
        return updateMeta(config.defaultMetas, meta);
      };

      SchoolMenuPlugin.prototype.contextualizeBefore = function(opts, next) {
        var collection, config, database, docpad, me, sourcePageDocuments, tasks;
        me = this;
        docpad = this.docpad;
        database = docpad.getDatabase();
        config = this.getConfig();
        tasks = new TaskGroup().once('complete', next);
        collection = opts.collection;
        sourcePageDocuments = collection.findAll({
          relativeOutDirPath: {
            $startsWith: config.menuRelativeOutDirPath
          }
        });
        sourcePageDocuments.forEach(function(document) {
          return tasks.addTask(function(complete) {
            document.setMeta(updateMetaWithDefaults(document.getMeta(), config));
            return document.normalize(function(err) {
              if (err) {
                return complete(err);
              }
              return complete();
            });
          });
        });
        tasks.run();
        return this;
      };

      SchoolMenuPlugin.prototype.render = function(opts) {
        var basename, config, file, fullPath, inExtension, menu, outExtension, outPath, templateData, updatedFileMeta;
        inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file, templateData = opts.templateData;
        config = this.getConfig();
        if ((inExtension === 'menu') && (outExtension === 'json')) {
          basename = file.get("basename");
          fullPath = file.get("fullPath");
          outPath = file.get("outPath");
          menu = SchoolMenuParser.parseFromPath(basename, fullPath, outPath);
          menu.meta = updateMetaWithDefaults(menu.meta, config);
          updatedFileMeta = updateMeta(file.getMeta(), menu.meta);
          file.setMeta(updatedFileMeta);
          file.set({
            menu: menu
          });
          templateData.menu = menu;
          opts.content = JSON.stringify(menu.formatJson(), null, '\t');
        }
      };

      return SchoolMenuPlugin;

    })(BasePlugin);
  };

}).call(this);
