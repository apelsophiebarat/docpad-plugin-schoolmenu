// Generated by CoffeeScript 1.6.3
(function() {
  var PluginDelegate, extendr, mergeObjects, safeParseFileContent, trace, useDocpad, utils, warn,
    __hasProp = {}.hasOwnProperty;

  extendr = require('extendr');

  utils = require('./Utils');

  mergeObjects = utils.mergeObjects, warn = utils.warn, trace = utils.trace, useDocpad = utils.useDocpad;

  safeParseFileContent = require('./MenuParser').safeParseFileContent;

  PluginDelegate = (function() {
    function PluginDelegate(docpad, pluginConfig) {
      this.docpad = docpad;
      this.pluginConfig = pluginConfig;
      useDocpad(this.docpad);
      this.database = this.docpad.database;
    }

    PluginDelegate.prototype.extendCollections = function(opts) {
      var collection, defaultMeta, query, _ref;
      _ref = this.pluginConfig, query = _ref.query, defaultMeta = _ref.defaultMeta;
      collection = this.database.createLiveChildCollection();
      collection.setQuery('isMenu', query);
      collection.on('add', function(model) {
        trace("add menu " + (model.getFilePath()));
        return model.setMetaDefaults(defaultMeta);
      });
      docpad.setCollection('isMenu', collection);
      return this;
    };

    PluginDelegate.prototype.extendTemplateData = function(opts) {
      var templateData, templateHelper, templateHelperName, _ref;
      templateData = opts.templateData;
      templateData.menuUtils = utils;
      _ref = this.pluginConfig.templateData;
      for (templateHelperName in _ref) {
        if (!__hasProp.call(_ref, templateHelperName)) continue;
        templateHelper = _ref[templateHelperName];
        templateData[templateHelperName] = templateHelper;
      }
      return this;
    };

    PluginDelegate.prototype.contextualizeAfter = function(opts) {
      var collection;
      collection = opts.collection;
      return this;
    };

    PluginDelegate.prototype.renderBefore = function(opts) {
      var templateData;
      templateData = opts.templateData;
      return this;
    };

    PluginDelegate.prototype.renderAfter = function(opts) {
      var collection;
      collection = opts.collection;
      return this;
    };

    PluginDelegate.prototype.render = function(opts) {
      var content, defaultMeta, file, inExtension, menu, menuData, metaFromMenu, outExtension, relativePath, templateData, updatedMeta, urls, writeAddedMeta, writeMeta, _ref;
      inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file, templateData = opts.templateData;
      _ref = this.pluginConfig, defaultMeta = _ref.defaultMeta, writeMeta = _ref.writeMeta, writeAddedMeta = _ref.writeAddedMeta;
      if (inExtension === 'menu') {
        relativePath = file.get("relativePath");
        content = file.get("content");
        if (content.length === 0) {
          warn("can not create a file from " + relativePath + " " + (file.get('encoding')));
          return this;
        }
        menu = safeParseFileContent(relativePath, content);
        if (menu == null) {
          return this;
        }
        menuData = menu.toJSON();
        templateData.menu = menuData;
        urls = menu.generateDaysUrl(file.get('url'));
        file.addUrl(urls);
        metaFromMenu = {
          title: templateData.prepareMenuTitle(menuData),
          description: templateData.prepareMenuDescription(menuData),
          tags: [].concat(menuData.fileName.schoolLevels),
          date: menuData.fileName.week.from
        };
        updatedMeta = mergeObjects(file.getMeta().toJSON(), metaFromMenu);
        file.setMeta(updatedMeta);
        content = {
          menu: menuData
        };
        if (writeMeta || writeAddedMeta) {
          if (writeAddedMeta) {
            content.meta = extendr.deepClone(defaultMeta, metaFromMenu);
          }
          if (writeMeta) {
            content.meta = extendr.deepClone(updatedMeta);
          }
        }
        opts.content = JSON.stringify(content, null, ' ');
      }
      return this;
    };

    return PluginDelegate;

  })();

  module.exports = PluginDelegate;

}).call(this);
