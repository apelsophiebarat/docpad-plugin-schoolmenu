// Generated by CoffeeScript 1.6.3
(function() {
  var Course, Day, Menu, MenuFileName, MenuParser, asArray, courseTypes, cson, frontMatter, normalize, now, readFileContent, trim, weekdayName, _, _ref;

  _ = require('underscore');

  cson = require('cson');

  frontMatter = require('yaml-front-matter');

  MenuFileName = require('./MenuFileName');

  Menu = require('./Menu');

  Day = require('./Day');

  Course = require('./Course');

  normalize = require('./Normalizer').normalize;

  courseTypes = require('./Config').current().courseTypes;

  _ref = require('./Utils'), weekdayName = _ref.weekdayName, now = _ref.now, trim = _ref.trim, asArray = _ref.asArray, readFileContent = _ref.readFileContent;

  MenuParser = (function() {
    var checkParameters, checkStringParameter, extractMetaAndContent, parseFileContent, safeParseFileContent;

    function MenuParser() {}

    checkStringParameter = function(name, value) {
      if (!((value != null) && value.length > 0)) {
        throw "invalid " + name + " ";
      }
    };

    checkParameters = function(fileName, content) {
      checkStringParameter('fileName', fileName);
      return checkStringParameter('content', content);
    };

    MenuParser.safeParseFileContent = safeParseFileContent = function(fileName, content) {
      var error;
      try {
        checkParameters(fileName, content);
      } catch (_error) {
        error = _error;
        return void 0;
      }
      return new MenuParser().parse(fileName, content);
    };

    MenuParser.parseFileContent = parseFileContent = function(fileName, content) {
      checkParameters(fileName, content);
      return new MenuParser().parse(fileName, content);
    };

    MenuParser.safeParseFromFile = function(fileName, fullPath) {
      return safeParseFileContent(fileName, readFileContent(fullPath));
    };

    MenuParser.parseFromFile = function(fileName, fullPath) {
      return parseFileContent(fileName, readFileContent(fullPath));
    };

    extractMetaAndContent = function(rawContent) {
      var content, contentAndMeta, meta;
      contentAndMeta = frontMatter.loadFront(rawContent);
      content = cson.parseSync(contentAndMeta.__content);
      delete contentAndMeta.__content;
      meta = contentAndMeta;
      return [content, meta];
    };

    MenuParser.prototype.parse = function(fileName, content) {
      var baseDay, comments, days, _ref1;
      this.menuFileName = new MenuFileName(fileName);
      _ref1 = extractMetaAndContent(content), content = _ref1[0], this.meta = _ref1[1];
      this.content = normalize(content);
      comments = this.parseComments(this.content);
      if (this.content.tous != null) {
        baseDay = this.parseDay(now(), this.content.tous);
      }
      days = this.parseDays(this.content, this.menuFileName.week, baseDay);
      return new Menu(this.menuFileName, days, comments);
    };

    MenuParser.prototype.parseComments = function(data) {
      var comments;
      comments = (data != null ? data.comment : void 0) || (data != null ? data.commentaire : void 0) || (data != null ? data.remarque : void 0) || [];
      return comments = asArray(comments);
    };

    MenuParser.prototype.parseDay = function(date, data) {
      var comments, courseType, courses, loadedCourses, _i, _len;
      comments = this.parseComments(data);
      courses = [];
      for (_i = 0, _len = courseTypes.length; _i < _len; _i++) {
        courseType = courseTypes[_i];
        if (data[courseType]) {
          loadedCourses = this.parseCourses(courseType, data[courseType]);
          courses = courses.concat(loadedCourses);
        }
      }
      return new Day(date, courses, comments);
    };

    MenuParser.prototype.parseCourses = function(courseType, data) {
      var courses, description, descriptions;
      descriptions = this.parseDescriptions(data);
      return courses = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = descriptions.length; _i < _len; _i++) {
          description = descriptions[_i];
          _results.push(new Course(courseType, description));
        }
        return _results;
      })();
    };

    MenuParser.prototype.parseDescriptions = function(data) {
      var descriptions;
      if (_.isString(data)) {
        descriptions = data.trim().split('/');
        descriptions = _.map(descriptions, trim);
      } else if (_.isArray(data)) {
        descriptions = _.map(data, this.parseDescriptions);
        descriptions = _.flatten(descriptions);
      } else {
        descriptions = [];
      }
      return descriptions;
    };

    MenuParser.prototype.parseDays = function(menuContent, week, baseDay) {
      var day, dayData, menuDay, menuDays, name, _i, _len, _ref1;
      menuDays = [];
      _ref1 = week.days();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        day = _ref1[_i];
        name = weekdayName(day);
        dayData = menuContent[name];
        if (dayData != null) {
          menuDay = this.parseDay(day, dayData);
          if (baseDay != null) {
            menuDay.addAll(baseDay);
          }
          menuDays.push(menuDay);
        }
      }
      return menuDays;
    };

    MenuParser.prototype.asJSON = function() {
      if (this.menu != null) {
        return this.menu.toJSON();
      } else {
        return {};
      }
    };

    return MenuParser;

  })();

  module.exports = MenuParser;

}).call(this);
