// Generated by CoffeeScript 1.6.3
(function() {
  var Week, asMoment, dayNames,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  asMoment = require('./Utils').asMoment;

  dayNames = require('./Config').current().dayNames;

  Week = (function() {
    function Week(date) {
      this.isBeforeWeek = __bind(this.isBeforeWeek, this);
      this.isInWeek = __bind(this.isInWeek, this);
      this.from = asMoment(date).clone().startOf('week');
      this.to = this.from.clone().add(5, 'day').add(-1, 'millisecond');
    }

    Week.prototype.toJSON = function() {
      return {
        from: this.from.toDate(),
        to: this.to.toDate()
      };
    };

    Week.prototype.isInWeek = function(date) {
      if (date.before(this.from) || date.after(this.to)) {
        return false;
      } else {
        return true;
      }
    };

    Week.prototype.isBeforeWeek = function(date) {
      return date.before(this.from);
    };

    Week.prototype.days = function() {
      var day, days, weekday, _i;
      days = [];
      for (weekday = _i = 0; _i <= 6; weekday = ++_i) {
        day = this.from.clone().set('weekday', weekday);
        days.push(day);
      }
      return days;
    };

    Week.prototype.dayByName = function(name) {
      var weekdayIndex, weekdayName, _ref;
      name = name.toLowerCase();
      _ref = dayNames();
      for (weekdayIndex in _ref) {
        weekdayName = _ref[weekdayIndex];
        if (name === weekdayName) {
          return this.from.clone().set('weekday', weekdayIndex);
        }
      }
      return void 0;
    };

    return Week;

  })();

  module.exports = Week;

}).call(this);
